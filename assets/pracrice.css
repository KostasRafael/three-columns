/* I struggled to decide whether the .container should be a BEM block or not. I mean, I knew that card is a block because it clearly stands on it's own and it can be used in other places.
   I finally decided that only card should be a BEM block. */

/*
Question:
How does the gap property behave when the browser shrinks 
Answer:
The gap will remain the same as long as
there is extra space that can be reduced
*/
/*
Question: 
When a div is given an outline. Is this outline shown from the outermost edge of the div
  and inside, or from the inner most edge of the div and outside, or how?
Answer:
The outline is always starts from the outermost edge of the inside area of the div. Also, if the div has a border, 
the outline will always start from the outer most edge of the border.
  */
/* 
Question:
When a div is given a border. Is this border added within the given area of the div (width * height), or 
outside the given area of the div?
Answer:
It depends on whether the box-sizing of the div is set to content-box (default) or border-box. 
If it is set to content-box, then the border will be outside the given area of the div, in order for the div to
be able to maintain it's given area. 
If it is set to border-box, then the border will be added inside the area of the div, in order for the border to be part of the
area of the div.
*/

/*When a div has box-sizing: content-box, as it's border's width incrases, it increases outwards. This is because, 
  in content-box, the div must maintain it's given width and height, even when the border increases it's width. */
/*When a div has box-sizing: border-box, as it's border's width increases, it increases inwards. This is because,
  in border-box, the div must always accommodate the width of it's border within it's given width and height, even when the 
  width of the border is increased. */

/*I know that when you have a flex-container, and you set justify-content: center, then the extra space will be
divided equally between the left side and the right side of the container. That is, the extra space that was all
placed at the right of the flex-items (because justfiy-content: flex-start), will now be equally divided and placed half at the left, before the flex-items, and half right, after the
flex-items. Like this, the space that the flex-items take, from the leftmost edge of the 1st flex-item, to the rightmost
edge of the last flex-item, will be centered.*/

body {
  background-color: black;
}

.grid-section {
  border: 2px solid green;
  display: flex;
  flex-direction: column;
  padding: 96px 0;
  align-items: center;
}

.container {
  border: 2px solid blue;
  display: flex;
  flex-direction: column;
  max-width: 1280px;
  padding: 0 32px;
  min-width: 0;
  width: 100%;
  box-sizing: border-box;
}

.container-row {
  border: 2px solid red;
  display: flex;
  justify-content: center; /*Even if the padding left and right on .container changes, the row will remain centered. */
  gap: 32px;
  min-width: 0;
}

.card {
  width: 384px;
  height: 174px;
  border: 1px solid #eaecf0;
  background: #fff;
  border-radius: 16px;
  flex-grow: 1;
  flex-shrink: 1;
  flex-basis: 0;
  min-width: 0;
}

/* 
width: 384px, height: 174px.
aspect ratio: width : height = 2.20 : 1
At 768px width, each card has a width of 210 px, and to maintain the aspect-ratio, each card 
should have a heigh of 210 : 2.2 = 96px. The height should be 96 px.
 */

/* Tablets (portrait and landscape) */
@media (max-width: 990px) {
  /* tablet styles here */
  .card {
    height: 95px;
    border-radius: 10px;
  }
}

/* Extra small mobiles (like older iPhones, 320px wide) */
@media (max-width: 479px) {
  .card {
    height: 50px;
    border-radius: 5px;
  }
}

.practice-container {
  margin-top: 200px;
  border: 5px solid red;
  display: flex;
  gap: 200px;
  box-sizing: content-box;
  height: 40px;
}

/* I want 4 children that have an inside area of 2000px, with height: 40px and width: 50px.
   This means that if the parent container has box-sizing set to content-box, then the parent div must have
    a row height of 50px
    
The gap is added only between flex-items, not before not after.
 This means that if justify-content is set to flex-start (the default), then we will have a flex-item at the start,
 then the given gap, then another flex-item, then the given gap, and so on, and at the end there will be a flex-item.
 Now, if after aaccommodating all the flex-items and the galps between them there is some extra space on the right, then
 When the borwser shrinks, the flex-container will shrink reducing this extra space, and maintaining the gaps as they are.
 But once we reach a point where there is no more extra space,
 The flex-items will start-shrinking towards their min-content size, and the gap will stil remain as it is.
 But once the flex-items have reached their min-content, then the flex-items (now at min-content size) and the gaps (still unaltered) will
 start overflowing their parent container.
 */

/*
 Question:
 There is some extra space. Does the padding property add to this extra space?
 Answer:
 If the padding is smaller than the extra space, then no, the padding does not add to it. The extra space will re
 main the same, and you will have no visible changes.
 If the padding is greater than the extra space, then yes, whatever amount of padding needed will be added to the 
 extra space in ordr for the total space to be equal to the total padding specified.
 
 Question
 But then, why would we ever add any padding that is smaller than the anyway-existing extra space?
 Answer
 One reason is because you might be interested in limiting the flex-grow of the flex-item. That is, you might want to
 ensure that the parent container will maintain some padding between them and the flex-item, even when flex-grow is set to 1 on the flex-item.*/

/*
 Question:
 There is a flex-container with one flex-item. The flex-item is sat at the far left of the flex-container (justify-content: flex-start).
 There is some extra space on the right of the flex-item. I set some padding left and right. If  then turn 
 flex-grow on, will the flex-item grow to fill the padding too? Or will it respect the padding, leave it empty,
 and only feel any other extra space? 
 Answer: No, the item will not grow to fill the padding space. Instead, it will respect the padding space. That is, the flex-item
 will only grow to feel any extra space without any paddings imposed by it's parent. The padding is impossed
 by the parent, and the flex-item will respect this.
 */

.center {
  margin-top: 200px;
  border: 2px solid red;
  display: flex;
  background-color: aquamarine;
  padding-left: 50px;
  padding-right: 50px;
}

.flex-item {
  border: 2px solid green;
  height: 50px;
  width: 1000px;
  background-color: brown;
  flex-grow: 1;
}

.childdiv1 {
  outline: 2.5px solid yellow;
  height: 40px;
  width: 50px;
}

.childdiv2 {
  outline: 2.5px solid yellow;
  height: 40px;
  width: 50px;
}

.childdiv3 {
  outline: 2.5px solid yellow;
  height: 40px;
  width: 50px;
}

.childdiv4 {
  outline: 2.5px solid yellow;
  height: 40px;
  width: 50px;
}

.measure-container {
  /* A measure that starts from 0px and shows every 5px
I want a div that starts from the outer edge of the left border and finishes at a point where the distance from 
the outer edge of it's left border to the outer edge of it's right border is 5px.
 */

  border: 5px solid rgb(216, 15, 172);
  height: 40px;
  display: flex;
  width: 1265px;
}

.five-px {
  border: 1px solid brown;
  height: 20px;
  width: 400px;
  box-sizing: border-box;
  flex-shrink: 0;
}
